Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

x

Line 1: declaration_list : declaration_list COMMA ID

x,y

Line 1: declaration_list : declaration_list COMMA ID

x,y,z

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int x,y,z;

Line 1: unit : var_declaration

int x,y,z;

Line 1: program : unit

int x,y,z;

Line 1: type_specifier : FLOAT

int

Line 1: declaration_list : ID

a

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

float a;

Line 1: unit : var_declaration

float a;

Line 1: program : program unit

int x,y,z;float a;

Line 3: type_specifier : VOID

void

Line 3: func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON

void foo();

Line 3: unit : func_declaration

void foo();

Line 3: program : program unit

int x,y,z;float a;void foo();

Line 5: type_specifier : INT

int

Line 5: type_specifier : INT

int

Line 5: type_specifier ID

int a

Line 5: type_specifier : INT

int

Line 5: parameter_list  : parameter_list COMMA type_specifier ID

int a , int

Line 6: variable : ID

a

Line 6: factor : variable

a

Line 6: unary_expression : factor

a

Line 6: term : unary_expression

a

Line 6: simple_expression : term 

a

Line 6: variable : ID

b

Line 6: factor : variable

b

Line 6: unary_expression : factor

b

Line 6: term : unary_expression

b

Line 6: simple_expression : simple_expression ADDOP term 

a+b

Line 6: rel_expression : simple_expression 

a+b

Line 6: logic_expression : rel_expression 

a+b

Line 6: expression : logic_expression

a+b

Line 6: statement : RETURN expression SEMICOLON

return a+b;

Line 7: compound_statement : LCURL statements RCURL


ScopeTable # 1.1
4 --> < a : int > 
5 --> < b : int > 


ScopeTable # 1
4 --> < a : ID > 
10 --> < var : int > 
27 --> < x : ID > 
28 --> < y : ID > 
29 --> < z : ID > < foo : ID > 


Line 7: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int var(int a,int){return a+b;}

Line 7: unit : func_definition

int

Line 7: program : program unit

int x,y,z;float a;void foo();int

Line 9: type_specifier : VOID

void

Line 10: variable : ID

x

Line 10: factor : CONST_INT

2

Line 10: unary_expression : factor

2

Line 10: term : unary_expression

2

Line 10: simple_expression : term 

2

Line 10: rel_expression : simple_expression 

2

Line 10: logic_expression : rel_expression 

2

Line 10: expression : variable ASSIGNOP logic_expression

x=2

Line 10: expression_statement : expression SEMICOLON 

x=2;

Line 10: statement : expression_statement

x=2;

Line 11: variable : ID

y

Line 11: variable : ID

x

Line 11: factor : variable

x

Line 11: unary_expression : factor

x

Line 11: term : unary_expression

x

Line 11: simple_expression : term 

x

Line 11: factor : CONST_INT

5

Line 11: unary_expression : factor

5

Line 11: term : unary_expression

5

Line 11: simple_expression : simple_expression ADDOP term 

x-5

Line 11: rel_expression : simple_expression 

x-5

Line 11: logic_expression : rel_expression 

x-5

Line 11: expression : variable ASSIGNOP logic_expression

y=x-5

Line 11: expression_statement : expression SEMICOLON 

y=x-5;

Line 11: statement : expression_statement

y=x-5;

Line 12: compound_statement : LCURL statements RCURL


ScopeTable # 1.2


ScopeTable # 1
4 --> < a : ID > 
10 --> < var : int > 
27 --> < x : ID > 
28 --> < y : ID > 
29 --> < z : ID > < foo : ID > 


Line 12: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void foo(){x=2;}

Line 12: unit : func_definition

void

Line 12: program : program unit

int x,y,z;float a;void foo();intvoid

Line 14: type_specifier : INT

int

